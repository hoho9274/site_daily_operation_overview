name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run E2E tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  e2e-ios:
    name: E2E Tests - iOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install iOS dependencies
        run: |
          cd ios && pod install

      - name: Build iOS app for testing
        run: npm run e2e:build:ios

      - name: Run E2E tests on iOS
        run: npm run e2e:test:ios
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
          REACT_APP_ENVIRONMENT: testing

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-ios
          path: |
            e2e/artifacts/
            e2e/reports/

  e2e-android:
    name: E2E Tests - Android
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Install dependencies
        run: npm ci

      - name: Build Android app for testing
        run: npm run e2e:build:android

      - name: Run E2E tests on Android
        run: npm run e2e:test:android
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
          REACT_APP_ENVIRONMENT: testing

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results-android
          path: |
            e2e/artifacts/
            e2e/reports/

  critical-flows-test:
    name: Critical Flows E2E Tests
    runs-on: macos-latest
    needs: [e2e-ios, e2e-android]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Critical Flows Tests
        run: |
          echo "Running critical flows validation..."
          # Add specific critical flows testing here
          # This should test the flows listed in CRITICAL_FLOWS.md
          npm run e2e:test:ios -- --testNamePattern="Critical Flows"
          npm run e2e:test:android -- --testNamePattern="Critical Flows"

      - name: Upload Critical Flows Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: critical-flows-results
          path: |
            e2e/artifacts/
            e2e/reports/

  performance-tests:
    name: Performance Tests
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Performance Tests
        run: |
          echo "Running performance tests..."
          # Add performance testing commands here
          # This could include load testing, memory profiling, etc.

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            e2e/artifacts/
            e2e/reports/

  notify-e2e-results:
    name: Notify E2E Results
    runs-on: ubuntu-latest
    needs: [e2e-ios, e2e-android, critical-flows-test, performance-tests]
    if: always()
    steps:
      - name: Notify E2E Success
        if: ${{ needs.e2e-ios.result == 'success' && needs.e2e-android.result == 'success' }}
        run: |
          echo "All E2E tests passed!"
          # Add success notification logic here

      - name: Notify E2E Failure
        if: ${{ needs.e2e-ios.result == 'failure' || needs.e2e-android.result == 'failure' }}
        run: |
          echo "E2E tests failed!"
          # Add failure notification logic here

      - name: Notify Critical Flows Failure
        if: ${{ needs.critical-flows-test.result == 'failure' }}
        run: |
          echo "Critical flows tests failed!"
          # Add critical failure notification logic here
